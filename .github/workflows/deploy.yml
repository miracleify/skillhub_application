name: Deployment to EC2 server

on:
  push:
    branches:
      - develop  # Ensures deployment from the develop branch
      - master   # Ensures deployment from the master branch

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code  # Fetch the latest code from the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Fetch only the latest commit

      - name: Configure AWS credentials  # AWS CLI Configuration
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR  # AWS Elastic Container Registry (ECR) Authentication
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image  # Build and push the Docker image to ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

  deploy_to_staging:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Public EC2 Server
        uses: appleboy/ssh-action@master
        if: github.ref == 'refs/heads/develop'
        with:
          host: ${{ secrets.PUBLIC_EC2_HOST }}        # Public EC2's IP or DNS
          username: ${{ secrets.PUBLIC_EC2_USER }}    # SSH user (e.g. ubuntu)
          key: ${{ secrets.PUBLIC_EC2_SSH_KEY }}      # Private key for your public EC2
          script: |
            set -ex
            export IMAGE_TAG=${{ github.sha }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
            export AWS_ECR_REPOSITORY=${{ secrets.AWS_ECR_REPOSITORY }}

            # --- 0. Install prerequisites on fresh EC2 ---
            sudo apt-get update -y
            sudo apt-get install -y docker.io awscli
            sudo systemctl enable docker
            sudo systemctl start docker

            # Navigate to home directory (can change to project dir if needed)
            cd ~

            # 1. Generate .env (Note: DB variables are commented out because frontend has no database)
            echo "PORT=${{ secrets.APP_PORT }}" > .env
            # echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            # echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            # echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            # echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            # echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            # echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

            # 2. Log in to AWS ECR
            aws ecr get-login-password --region $AWS_REGION \
              | sudo docker login --username AWS --password-stdin $AWS_ECR_REGISTRY

            # 3. Pull and run the new image
            sudo docker pull $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG
            sudo docker stop app || true
            sudo docker rm app || true
            sudo docker run -d --name app -p ${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }} \
              --env-file .env \
              $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG

            sudo docker image prune -af
